/vol/bitbucket/al4624/anaconda3/envs/YuE_finetune/lib/python3.10/site-packages/transformers/utils/hub.py:105: FutureWarning: Using `TRANSFORMERS_CACHE` is deprecated and will be removed in v5 of Transformers. Use `HF_HOME` instead.
  warnings.warn(
Matplotlib is building the font cache; this may take a moment.

Fetching 3 files:   0%|          | 0/3 [00:00<?, ?it/s]
Fetching 3 files:  33%|███▎      | 1/3 [03:50<07:40, 230.23s/it]
Fetching 3 files: 100%|██████████| 3/3 [03:50<00:00, 76.74s/it] 
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.

Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]
Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:00,  3.00it/s]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:07<00:04,  4.59s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:11<00:00,  4.22s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:11<00:00,  3.89s/it]
/vol/bitbucket/al4624/anaconda3/envs/YuE_finetune/lib/python3.10/site-packages/torch/nn/utils/weight_norm.py:134: FutureWarning: `torch.nn.utils.weight_norm` is deprecated in favor of `torch.nn.utils.parametrizations.weight_norm`.
  WeightNorm.apply(module, name, dim)

Stage1 inference...:   0%|          | 0/3 [00:00<?, ?it/s]The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.

Stage1 inference...:  67%|██████▋   | 2/3 [05:06<02:33, 153.48s/it]
Stage1 inference...: 100%|██████████| 3/3 [09:52<00:00, 208.61s/it]
Stage1 inference...: 100%|██████████| 3/3 [09:52<00:00, 197.58s/it]
Stage 2 inference...

  0%|          | 0/2 [00:00<?, ?it/s]
 50%|█████     | 1/2 [06:02<06:02, 362.83s/it]
100%|██████████| 2/2 [12:06<00:00, 363.38s/it]
100%|██████████| 2/2 [12:06<00:00, 363.29s/it]
/homes/al4624/Documents/YuE_finetune/YuE_finetune_trans_gen/inference/xcodec_mini_infer/vocoder.py:21: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  vocal_decoder.load_state_dict(torch.load(vocal_decoder_path))
/homes/al4624/Documents/YuE_finetune/YuE_finetune_trans_gen/inference/xcodec_mini_infer/vocoder.py:23: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  inst_decoder.load_state_dict(torch.load(inst_decoder_path))
/homes/al4624/Documents/YuE_finetune/YuE_finetune_trans_gen/inference/xcodec_mini_infer/vocoder.py:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  compressed = torch.tensor(compressed).to(f"cuda:{args.cuda_idx}")
['/vol/bitbucket/al4624/inference_output/stage2/inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_vtrack.npy', '/vol/bitbucket/al4624/inference_output/stage2/inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_itrack.npy']
Stage 2 DONE.

Processing /vol/bitbucket/al4624/inference_output/stage2/inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_vtrack.npy
Compressed shape: (8, 3000)
Decoded in 19.04s (3.15x RTF)
Saved: /vol/bitbucket/al4624/inference_output/vocoder/stems/vtrack.mp3
Processing /vol/bitbucket/al4624/inference_output/stage2/inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_itrack.npy
Compressed shape: (8, 3000)
Decoded in 0.02s (3144.86x RTF)
Saved: /vol/bitbucket/al4624/inference_output/vocoder/stems/itrack.mp3
Created mix: /vol/bitbucket/al4624/inference_output/vocoder/mix/inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_mixed.mp3
Successfully created 'inspiring-female-uplifting-pop-airy-vocal-electronic-bright-vocal-vocal_tp0@93_T1@0_rp1@1_maxtk3000_2ae70180-a3ff-4f70-a630-f66e09194bd3_mixed.mp3' with matched low-frequency energy.
